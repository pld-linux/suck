--- suck-4.3.4/active.c.orig	2018-08-01 15:54:24.000000000 +0200
+++ suck-4.3.4/active.c	2019-09-29 19:31:54.637781124 +0200
@@ -189,7 +189,7 @@ int connect_local(PMaster master) {
 		do_debug("Connecting to %s on port %d\n", master->localhost, port);
 	}
 
-	if((fd = connect_to_nntphost(master->localhost, NULL, 0, NULL, port, master->local_ssl, &master->local_ssl_struct)) >= 0) {
+	if((fd = connect_to_nntphost(master->localhost, NULL, 0, NULL, port, master->local_ssl, &master->local_ssl_struct, master->ai_family)) >= 0) {
 		/* get the announcement line */
 		if(sgetline(fd, &inbuf, master->local_ssl, master->local_ssl_struct) < 0) {
 			close(fd);
--- suck-4.3.4/both.c.orig	2018-08-01 15:54:24.000000000 +0200
+++ suck-4.3.4/both.c	2019-09-29 19:38:49.382200927 +0200
@@ -139,10 +139,17 @@ char *get_long(char *sp, long *intPtr) {
 }
 
 /*---------------------------------------------*/
-struct addrinfo *get_addrinfo(const char *host, const char *sport) {
-	struct addrinfo hints = { .ai_socktype=SOCK_STREAM, .ai_flags = AI_CANONNAME };
+struct addrinfo *get_addrinfo(const char *host, const char *sport, int family) {
+	struct addrinfo hints = { .ai_socktype=SOCK_STREAM, .ai_flags = AI_CANONNAME, .ai_family = family };
 	struct addrinfo * res = NULL;
 
+#ifdef AI_ADDRCONFIG
+	hints.ai_flags |= AI_ADDRCONFIG;
+#endif
+#ifdef AI_NUMERICSERV
+	hints.ai_flags |= AI_NUMERICSERV;
+#endif
+
 	if(host==NULL) {
 		error_log(ERRLOG_REPORT,both_phrases[0], NULL);
 	}
@@ -155,7 +162,7 @@ struct addrinfo *get_addrinfo(const char
 	return res;
 }
 /*--------------------------------------------*/
-int connect_to_nntphost(const char *host, char * name, size_t namelen, FILE *msgs, unsigned short int portnr, int do_ssl, void **ssl) {
+int connect_to_nntphost(const char *host, char * name, size_t namelen, FILE *msgs, unsigned short int portnr, int do_ssl, void **ssl, int family) {
 	char *realhost;
 	char sport[10];
 	int sockfd = -1;
@@ -191,7 +198,13 @@ int connect_to_nntphost(const char *host
 		MyPerror("out of memory copying host name");
 		return sockfd;
 	}
-	char * ptr = strchr(realhost, ':');
+	char * colonsearchstart = realhost;
+	if(realhost[0] == '[') { /* numeric IPv6 host contains colons, skip this part */
+		char *v6end = strchr(realhost, ']');
+		if (v6end != NULL)
+			colonsearchstart = v6end + 1;
+	}
+	char * ptr = strchr(colonsearchstart, ':');
 	if(ptr != NULL) {
 		*ptr = '\0';  /* null terminate host name */
 		portnr = atoi(++ptr); /* get port number */
@@ -203,7 +216,7 @@ int connect_to_nntphost(const char *host
 	print_phrases(msgs, both_phrases[1], sport, NULL);
 
 	/* Find the internet addresses of the NNTP server */
-	ai = get_addrinfo(realhost, sport);
+	ai = get_addrinfo(realhost, sport, family);
 	if(ai == NULL) {
 		free(realhost);
 	}
--- suck-4.3.4/both.h.orig	2018-08-01 15:54:24.000000000 +0200
+++ suck-4.3.4/both.h	2019-09-29 19:23:51.547064917 +0200
@@ -9,11 +9,10 @@
 /* declarations */
 int sgetline(int fd, char **sbuf, int, void *);
 int sputline(int fd, const char *outbuf, int, void *);
-int connect_to_nntphost(const char *host, char *, size_t, FILE *, unsigned short int, int, void **);
+int connect_to_nntphost(const char *host, char *, size_t, FILE *, unsigned short int, int, void **, int family);
 void disconnect_from_nntphost(int, int, void **);
 char *number(char *sp, int *intPtr);
 char *get_long(char *, long *);
-struct hostent *get_hostent(const char *host);
 void signal_block(int);
 void error_log(int mode, const char *fmt, ...);
 void MyPerror(const char *);
--- suck-4.3.4/rpost.c.orig	2019-09-29 12:37:57.232336891 +0200
+++ suck-4.3.4/rpost.c	2019-09-29 19:41:21.641376068 +0200
@@ -79,6 +79,7 @@ typedef struct {
 #ifdef PERL_EMBED
 	PerlInterpreter *perl_int;
 #endif
+        int ai_family;
 } Args, *Pargs;
 
 /* function declarations */
@@ -149,6 +150,7 @@ int main(int argc, char *argv[], char *e
 #ifdef PERL_EMBED
 	myargs.perl_int = NULL;
 #endif
+	myargs.ai_family = PF_UNSPEC;
 
 	/* have to do this next so if set on cmd line, overrides this */
 #ifdef N_PHRASES		/* in case someone nukes def */
@@ -241,7 +243,7 @@ int main(int argc, char *argv[], char *e
 			retval = RETVAL_ERROR;
 		}
 		else {
-			myargs.sockfd = connect_to_nntphost( myargs.host, hostname, sizeof hostname, myargs.status_fptr, myargs.portnr, myargs.do_ssl, &myargs.ssl_struct);
+			myargs.sockfd = connect_to_nntphost( myargs.host, hostname, sizeof hostname, myargs.status_fptr, myargs.portnr, myargs.do_ssl, &myargs.ssl_struct, myargs.ai_family);
 			if(myargs.sockfd < 0) {
 				retval = RETVAL_ERROR;
 			}
@@ -738,6 +740,9 @@ int scan_args(Pargs myargs, int argc, ch
 				myargs->portnr = DEFAULT_SSL_PORT;
 				break;
 #endif
+			case '4': /* IPv4 only */
+				myargs->ai_family = PF_INET;
+				break;
 			  default:
 				error_log(ERRLOG_REPORT, rpost_phrases[30], argv[loop],NULL);
 				break;
--- suck-4.3.4/suck.c.orig	2018-08-01 15:54:24.000000000 +0200
+++ suck-4.3.4/suck.c	2019-09-29 19:43:03.297492016 +0200
@@ -118,6 +118,7 @@ enum {
 	ARG_HIST_FILE, ARG_HEADER_ONLY, ARG_ACTIVE_LASTREAD, ARG_USEXOVER, ARG_RESETCOUNTER, \
 	ARG_LOW_READ, ARG_SHOW_GROUP, ARG_USE_SSL, ARG_LOCAL_SSL, ARG_BATCH_POST_NR, \
 	ARG_PASSWD_ENV,
+	ARG_IPV4_ONLY,
 };
 
 typedef struct Arglist{
@@ -198,6 +199,7 @@ const Args arglist[] = {
 	{"W",  "wait", 2, ARG_WAIT, 46},
 	{"X",  "no_xover", 0, ARG_XOVER, -1},
 	{"Z",  "use_xover", 0, ARG_USEXOVER, -1},
+	{"4",  "v4", 0, ARG_IPV4_ONLY, -1},
 
 };
 
@@ -290,6 +292,7 @@ int main(int argc, char *argv[]) {
 	master.local_ssl_struct = NULL;
 	master.batch_post_nr = 0;
 	master.passwd_env = FALSE;
+	master.ai_family = PF_UNSPEC;
 
 	/* have to do this next so if set on cmd line, overrides this */
 
@@ -695,7 +698,7 @@ int do_connect(PMaster master, int which
 	}
 	fp = (which_time == CONNECT_FIRST) ? master->msgs : NULL;
 
-	master->sockfd = connect_to_nntphost( master->host, NULL, 0, fp, master->portnr, master->do_ssl, &master->ssl_struct);
+	master->sockfd = connect_to_nntphost( master->host, NULL, 0, fp, master->portnr, master->do_ssl, &master->ssl_struct, master->ai_family);
 
 	if(master->sockfd < 0 ) {
 		retval = RETVAL_ERROR;
@@ -2131,6 +2134,9 @@ int parse_args(PMaster master, int arg,
 		master->local_ssl = TRUE;
 		break;
 #endif
+	case ARG_IPV4_ONLY:
+		master->ai_family = PF_INET;
+		break;
 
 	}
 
--- suck-4.3.4/suck.h.orig	2018-08-01 15:54:24.000000000 +0200
+++ suck-4.3.4/suck.h	2019-09-29 19:43:18.490743041 +0200
@@ -103,6 +103,7 @@ typedef struct {
 	void *local_ssl_struct;
 	int batch_post_nr;
 	int passwd_env;
+	int ai_family;
 } Master, *PMaster;
 
 int get_a_chunk(PMaster, FILE *);
--- suck-4.3.4/testhost.c.orig	2018-08-01 15:54:24.000000000 +0200
+++ suck-4.3.4/testhost.c	2019-09-29 19:44:56.280213270 +0200
@@ -59,6 +59,7 @@ void free_phrases(void);
 int main(int argc, char *argv[]) {
 
 	int sockfd, response, loop, cmd, quiet, mode_reader, do_ssl, retval = RETVAL_OK;
+	int ai_family = PF_UNSPEC;
 	struct stat sbuf;
 	unsigned short int portnr;
 	FILE *fptr = stdout;		/* used to print output to */
@@ -214,6 +215,9 @@ int main(int argc, char *argv[]) {
 				portnr = DEFAULT_SSL_PORT;
 				break;
 #endif
+			case '4':
+				ai_family = PF_INET;
+				break;
 			  default:
 				retval = RETVAL_ERROR;
 				error_log(ERRLOG_REPORT, test_phrases[7], argv[loop], NULL);
@@ -228,7 +232,7 @@ int main(int argc, char *argv[]) {
 	if(retval == RETVAL_OK) {
 		load_phrases(phrases);	/* this is here so everything displays okay */
 
-		sockfd = connect_to_nntphost( host, NULL, 0, (quiet == FALSE)?  fptr : NULL, portnr, do_ssl, &ssl_struct);
+		sockfd = connect_to_nntphost( host, NULL, 0, (quiet == FALSE)?  fptr : NULL, portnr, do_ssl, &ssl_struct, ai_family);
 		if(sockfd < 0 ) {
 			retval = RETVAL_ERROR;
 		}
